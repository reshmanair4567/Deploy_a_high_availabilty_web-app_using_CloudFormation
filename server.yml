Parameters:



    EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String
    EnvironmentLocation:
        Description: An environment Location that will be prefixed to resources
        Type: String
    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16
    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for this - Public Subnet
        Type: String
        Default: 10.0.60.0/24
    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for this - Public Subnet
        Type: String
        Default: 10.0.70.0/24
    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation)
        Type: String
        Default: 10.0.3.0/24
    PrivateSubnet2CIDR:
          Description: Please enter the IP range (CIDR notation)
          Type: String
          Default: 10.0.4.0/24

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            EnableDnsSupport: true
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-vpc
    PrivateSub1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-Private-Subnet-AZ1
      
    PrivateSub2:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
              -   Key: Name
                  Value: !Sub ${EnvironmentName}-Private-Subnet-AZ2
    PublicSub1:
      Type: 'AWS::EC2::Subnet'
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags:
              -   Key: Name
                  Value: !Sub ${EnvironmentName}-Public-Subnet-AZ1
          
    PublicSub2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-Public-Subnet-AZ2
          
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
          Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-igw
          
    GatewayAttachement:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC
      
    NatGateway1EIP:
        Type: 'AWS::EC2::EIP'
        DependsOn: GatewayAttachement
        Properties:
          Domain: vpc
      
    NatGateway2EIP:
        Type: 'AWS::EC2::EIP'
        DependsOn: GatewayAttachement
        Properties:
          Domain: vpc
                
    NatGateway1:
        Type: 'AWS::EC2::NatGateway'
        Properties:
            AllocationId:
                Fn::GetAtt:
                    - NatGateway1EIP
                    - AllocationId
            SubnetId: !Ref PublicSub1
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-Nat-Gateway-1
                
    NatGateway2:
        Type: 'AWS::EC2::NatGateway'
        Properties:
            AllocationId: !GetAtt 'NatGateway2EIP.AllocationId'
            SubnetId: !Ref PublicSub2
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-Nat-Gateway-2
            
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref 'VPC'
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-public-route-table
          
    PublicRoute:
        Type: AWS::EC2::Route
        DependsOn: GatewayAttachement
        Properties:
            RouteTableId: !Ref 'PublicRouteTable'
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId: !Ref 'InternetGateway'
            
          
    PublicSubnetOneRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSub1
            RouteTableId: !Ref PublicRouteTable
      
    PublicSubnetTwoRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSub2
            RouteTableId: !Ref PublicRouteTable

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref 'VPC'
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-Private-Route-Table-AZ1
          
    PrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref 'PrivateRouteTable1'
            NatGatewayId: !Ref 'NatGateway1'
            DestinationCidrBlock: '0.0.0.0/0'
            

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSub1
            RouteTableId: !Ref PrivateRouteTable1
      
    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref 'VPC'
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-Private-Route-Table-AZ2

    PrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref 'PrivateRouteTable2'
            NatGatewayId: !Ref 'NatGateway2'
            DestinationCidrBlock: '0.0.0.0/0'
            
      
    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSub2
            RouteTableId: !Ref PrivateRouteTable2

## Elastic Load Balancer ##
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Ref: PublicSub1
                - Ref: PublicSub2
            SecurityGroups:
                - Ref: LBSecurityGroup         
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-lb

    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref LoadBalancer
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref WebServerTargetGroup
            Port: 80
            Protocol: HTTP

    LoadBalancerListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties: 
            Actions: 
                - Type: forward
                  TargetGroupArn: !Ref WebServerTargetGroup
            Conditions: 
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref LoadBalancerListener
            Priority: 1

    WebServerTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            TargetType: instance
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-web-server-tg
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 2
            VpcId: !Ref 'VPC'

##  Bastion ##
    BastionNode:
        Type: AWS::EC2::Instance
        Properties:
            BlockDeviceMappings:
                - DeviceName: "/dev/sdb"
                  Ebs:
                    VolumeSize: '64'
                    VolumeType: gp2
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-bastion
            ImageId: ami-06f2f779464715dc5
            InstanceType: t3.small
            SubnetId:
                Ref: PublicSub1
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            SecurityGroupIds:
                - Ref: BastionSecurityGroup  
        DependsOn:
            - BastionSecurityGroup
            - PublicSub1

## Security Groups ##
    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security Group for Bastion Node
            VpcId: !Ref 'VPC'
            GroupDescription: Bastion security group
            SecurityGroupIngress:
                - CidrIp: 0.0.0.0/0
                  IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-bastion-sg

    LBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId: !Ref 'VPC'
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 8080
                  ToPort: 8080
                  CidrIp: 0.0.0.0/0
    
    WebSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref 'VPC'
            GroupDescription: Allow http to our host and SSH from local only
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0

                  
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-web-server-sg
                   
## Web Servers Auto Scaling and Launch Config ##
    WebServerAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            Cooldown: 100
            TargetGroupARNs:
                - !Ref WebServerTargetGroup
            VPCZoneIdentifier:
                - Ref: "PrivateSub1"
                - Ref: "PrivateSub2"
            MetricsCollection: 
                - Granularity: "1Minute"
                  Metrics: 
                    - "GroupMinSize"
                    - "GroupMaxSize"
            LaunchConfigurationName:
                Ref: "WebServerLaunchConfig"
            MinSize: "3"
            MaxSize: "5"
            Tags:
                - Key: Environment
                  Value: !Sub ${EnvironmentName}-web-server-asg
                  PropagateAtLaunch: "true"

    WebServerLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://deploy-iac-udagram/Udagram.zip .
                    unzip -o Udagram.zip
                    
            ImageId: ami-06f2f779464715dc5
            IamInstanceProfile:
                Ref: S3BucketInstanceProfile
            InstanceType: t2.micro
            BlockDeviceMappings:
                - DeviceName: "/dev/sda1"
                  Ebs:
                      VolumeSize: '64'
                      VolumeType: gp2
            SecurityGroups:
                - Ref: WebSecurityGroup

## s3 bucket policy ##    
    S3BucketsPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: S3BucketsPolicy
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Action:
                          - s3:List*
                      Resource: "*"
            Roles:
                - Ref: S3BucketsRole

    S3BucketsRole:
        Type: AWS::IAM::Role
        Properties:
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    Effect: "Allow"
                    Principal:
                        Service:
                            - ec2.amazonaws.com
                    Action: 
                        - "sts:AssumeRole"
        

    S3BucketInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            
            Roles:
                - Ref: S3BucketsRole


Outputs:
    VPC:
        Description: "A reference to created VPC"
        Value: !Ref VPC
        Export:
            Name: !Sub "${EnvironmentName}-VPCID"

    PrivateSub1:
        Description: "A reference to private subnet in AZ-1"
        Value: !Ref PrivateSubnet1CIDR
        Export:
            Name: !Sub "${EnvironmentLocation}-PRIVATESUBNET1"
    PrivateSub2:
        Description: "A reference to private subnet in AZ-2"
        Value: !Ref PrivateSubnet2CIDR
        Export:
            Name: !Sub "${EnvironmentLocation}-PRIVATESUBNET2"
    PublicSub1:
        Description: "A reference to public subnet in AZ-1"
        Value: !Ref PublicSubnet1CIDR
        Export:
            Name: !Sub "${EnvironmentLocation}-PUBLICSUBNET1"
    PublicSub2:
        Description: "A reference to public subnet in AZ-2"
        Value: !Ref PublicSubnet2CIDR
        Export:
            Name: !Sub "${EnvironmentLocation}-PUBLICSUBNET2"
    
    PublicSubnets:
        Description: A list of public subnets
        Value: !Join [",", [!Ref PublicSub1, !Ref PublicSub2]]
        Export:
            Name: !Sub "${EnvironmentLocation}-PUB-NETS"
    
    PrivateSubnets:
        Description: A list of private subnets
        Value: !Join [",", [!Ref PrivateSub1, !Ref PrivateSub2]]
        Export:
            Name: !Sub "${EnvironmentLocation}-PRIV-NETS"

    VPCPublicRouteTable:
        Description: Public Routing
        Value: !Ref PublicRouteTable
        Export:
            Name: !Sub "${EnvironmentLocation}-PUB-RT"

    VPCPrivateRouteTable1:
        Description: Private Routing AZ1
        Value: !Ref PrivateRouteTable1
        Export:
            Name: !Sub "${EnvironmentLocation}-PRI1-RT"

    VPCPrivateRouteTable2:
        Description: Private Routing AZ2
        Value: !Ref PrivateRouteTable2
        Export:
            Name: !Sub "${EnvironmentLocation}-PRI2-RT"
    IGW:
        Description: Stack IGW ID
        Value: !Ref InternetGateway
        Export:
            Name: !Sub "${EnvironmentLocation}-IGW"
    BastionIP:
        Description: "Bastion Public IP"
        Value: !GetAtt BastionNode.PublicIp
        Export:
            Name: !Sub "${EnvironmentLocation}-Bastion-Public-IP"
    BastionDNS:
        Description: Bastion DNS
        Value: !GetAtt BastionNode.PublicDnsName
        Export:
            Name: !Sub "${EnvironmentLocation}-bastion-Public-DNS"
    LoadBalancerDNS:
        Description: LoadBalancer DNS
        Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
        Export:
            Name: !Sub "${EnvironmentLocation}-LB-DNSName"


    