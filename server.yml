Description: >
Reshma Nair | Deploy a high availabilty web-app using CloudFormation

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String
    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16
    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for this - Public Subnet
        Type: String
        Default: 10.0.60.0/24
    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for this - Public Subnet
        Type: String
        Default: 10.0.70.0/24
    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.3.0/24
    PrivateSubnet2CIDR:
          Description: Please enter the IP range (CIDR notation) for this
          Type: String
          Default: 10.0.4.0/24

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: !Ref VpcCIDR
          EnableDnsHostnames: true
          EnableDnsSupport: true
          Tags:
              -   Key: Name
                  Value: !Sub ${EnvironmentName}-vpc

    PrivateSub1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone:
              Fn::Select: 
                - 0
                - Fn::GetAZs: ""
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-Private-Subnet-AZ1
      
    PrivateSub2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone:
              Fn::Select: 
                - 0
                - Fn::GetAZs: ""
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-Private-Subnet-AZ2   
    PublicSub1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone:
              Fn::Select: 
                - 0
                - Fn::GetAZs: ""
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-Public-Subnet-AZ1

    PublicSub2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone:
              Fn::Select: 
                - 0
                - Fn::GetAZs: ""
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-Public-Subnet-AZ2
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId: 
              Fn::ImportValue:
                !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local
            VpcId: 
              Fn::ImportValue:
                !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install unzip awscli -y
              apt-get install apache2 -y
              systemctl start apache2
              cd /var/www/html
              aws s3 cp s3://udacity-clouddevops/code.zip .
              unzip -o code.zip
              cp code/index.html .
              chown -R www-data:www-data .
          ImageId: ami-005bdb005fb00e791
          IamInstanceProfile:
            Ref: ListS3BucketsInstanceProfile
          SecurityGroups:
          - Ref: WebServerSecGroup
          InstanceType: t3.small
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
          - Fn::ImportValue:
              !Sub "${EnvironmentName}-PRIV-NETS"
          LaunchConfigurationName:
            Ref: WebAppLaunchConfig
          MinSize: '3'
          MaxSize: '5'
          TargetGroupARNs:
          - Ref: WebAppTargetGroup
          

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
          SecurityGroups:
          - Ref: LBSecGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLB
          Port: '80'
          Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId:
            Fn::ImportValue:
                !Sub "${EnvironmentName}-VPCID"

    ListS3BucketsInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
        - Ref: ListS3BucketsRole

    ListS3BucketsPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ListS3BucketsPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:List*
            Resource: "*"
        Roles:
        - Ref: ListS3BucketsRole

    ListS3BucketsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"


    